package cs276.assignments;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class Query {

	// Term id -> position in index file
	private static Map<Integer, Long> posDict = new TreeMap<Integer, Long>();
	// Term id -> document frequency
	private static Map<Integer, Integer> freqDict = new TreeMap<Integer, Integer>();
	// Doc id -> doc name dictionary
	private static Map<Integer, String> docDict = new TreeMap<Integer, String>();
	// Term -> term id dictionary
	private static Map<String, Integer> termDict = new TreeMap<String, Integer>();
	// Index
	private static BaseIndex index = null;

	
	/* 
	 * Write a posting list with a given termID from the file 
	 * You should seek to the file position of this specific
	 * posting list and read it back.
	 * */
	private static PostingList readPosting(FileChannel fc, int termId)
			throws IOException {
	    fc.position(posDict.get(termId));
	    return index.readPosting(fc);
	}

	public static void main(String[] args) throws IOException {
		/* Parse command line */
		if (args.length != 2) {
			System.err.println("Usage: java Query [Basic|VB|Gamma] index_dir");
			return;
		}

		/* Get index */
		String className = "cs276.assignments." + args[0] + "Index";
		try {
			Class<?> indexClass = Class.forName(className);
			index = (BaseIndex) indexClass.newInstance();
		} catch (Exception e) {
			System.err
					.println("Index method must be \"Basic\", \"VB\", or \"Gamma\"");
			throw new RuntimeException(e);
		}

		/* Get index directory */
		String input = args[1];
		File inputdir = new File(input);
		if (!inputdir.exists() || !inputdir.isDirectory()) {
			System.err.println("Invalid index directory: " + input);
			return;
		}

		/* Index file */
		RandomAccessFile indexFile = new RandomAccessFile(new File(input,
				"corpus.index"), "r");

		String line = null;
		/* Term dictionary */
		BufferedReader termReader = new BufferedReader(new FileReader(new File(
				input, "term.dict")));
		while ((line = termReader.readLine()) != null) {
			String[] tokens = line.split("\t");
			termDict.put(tokens[0], Integer.parseInt(tokens[1]));
		}
		termReader.close();

		/* Doc dictionary */
		BufferedReader docReader = new BufferedReader(new FileReader(new File(
				input, "doc.dict")));
		while ((line = docReader.readLine()) != null) {
			String[] tokens = line.split("\t");
			docDict.put(Integer.parseInt(tokens[1]), tokens[0]);
		}
		docReader.close();

		/* Posting dictionary */
		BufferedReader postReader = new BufferedReader(new FileReader(new File(
				input, "posting.dict")));
		while ((line = postReader.readLine()) != null) {
			String[] tokens = line.split("\t");
			posDict.put(Integer.parseInt(tokens[0]), Long.parseLong(tokens[1]));
			freqDict.put(Integer.parseInt(tokens[0]),
					Integer.parseInt(tokens[2]));
		}
		postReader.close();

		/* Processing queries */
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		/* For each query */
		while ((line = br.readLine()) != null) {
		    FileChannel indexChannel = indexFile.getChannel();
		    String[] queryTokens = line.split(" ");
		    if (queryTokens.length <= 0) continue;
		    
		    // Get all the posting lists.
		    boolean noResults = false;
		    ArrayList<PostingList> postingLists = new ArrayList<PostingList>();
		    for (String queryToken : queryTokens) {
			Integer termId = termDict.get(queryToken);
			if (termId == null) {
			    noResults = true;
			}
			else postingLists.add(readPosting(indexChannel, termId));
		    }

		    List<Integer> results = null;
		    if (noResults) {
			results = new ArrayList<Integer>();
		    } else {
			// Sort by posting list length increasing order.
			class PostingListComparator implements Comparator<PostingList> {
			    public int compare(PostingList pl1, PostingList pl2) {
				return pl1.getList().size() - pl2.getList().size();
			    }
			}
			Collections.sort(postingLists, new PostingListComparator());
		    
			for (PostingList pl : postingLists) {
			    if (results == null) {
				// First pl.
				results = pl.getList();
			    } else {
				// Intersect results and pl.
				List<Integer> intersection = new ArrayList<Integer>();
				List<Integer> l = pl.getList();
				int i = 0;
				int j = 0;
				//System.out.println("  l length: " + l.size());
				//System.out.println("  r length: " + results.size());
				while (i < results.size() && j < l.size()) {
				    //System.out.println("      r=" + results.get(i) + " l=" + l.get(j) + " i=" + i + " j=" + j);
				    if (results.get(i).equals(l.get(j))) {
					//System.out.println("  === intersection: " + l.get(j));
					intersection.add(l.get(j));
					i++;
					j++;
				    } else if (results.get(i).compareTo(l.get(j)) < 0) {
					i++;
				    } else {
					j++;
				    }
				}
				results = intersection;
			    }
			    //System.out.println("pl length: " + results.size());
			}
		    }
		    
		    if (results.size() == 0) {
			System.out.println("no results found");
		    } else {
			ArrayList<String> docs = new ArrayList<String>();
			for (int docId : results) {
			    docs.add(docDict.get(docId));
			}
			Collections.sort(docs);
			for (String doc : docs) {
			    System.out.println(doc);
			}
		    }

		}
		br.close();
		indexFile.close();
	}
}
